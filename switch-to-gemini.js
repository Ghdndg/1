const fs = require('fs');
const { execSync } = require('child_process');

console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Google Gemini API...');

// –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
const envContent = 'GEMINI_API_KEY=AIzaSyAJ2DSx4ozRJaJe2njQuhCr__02MTGpQfw';
fs.writeFileSync('.env', envContent);

console.log('‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è Google Gemini');

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Gemini
const indexPath = './app/index.js';
let code = fs.readFileSync(indexPath, 'utf8');

// –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
code = code.replace('const OpenAI = require(\'openai\');', 'const axios = require(\'axios\');');

// –ó–∞–º–µ–Ω—è–µ–º API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
code = code.replace(
  /const OPENAI_API_KEY = .*?;\s*\n\s*\/\/ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞\s*\n\s*const openai = new OpenAI\({[\s\S]*?}\);/,
  `const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyAJ2DSx4ozRJaJe2njQuhCr__02MTGpQfw';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent';`
);

// –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API –∫–ª—é—á–∞
code = code.replace(
  /if \(!OPENAI_API_KEY.*?}\s*}/s,
  `if (!GEMINI_API_KEY || GEMINI_API_KEY === 'AIzaSyAJ2DSx4ozRJaJe2njQuhCr__02MTGpQfw') {
  console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.warn('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
  console.warn('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://ai.google.dev/');
  console.warn('2. –ù–∞–∂–º–∏—Ç–µ "Get API key"');
  console.warn('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á');
  console.warn('4. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª .env –∫–∞–∫ GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á');
  console.warn('5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
}`
);

// –ó–∞–º–µ–Ω—è–µ–º health check
code = code.replace(
  'openai: OPENAI_API_KEY && OPENAI_API_KEY !== \'–í–ê–®_OPENAI_API_–ö–õ–Æ–ß_–°–Æ–î–ê\' ? \'configured\' : \'not_configured\'',
  'gemini: GEMINI_API_KEY ? \'configured\' : \'not_configured\''
);

// –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É API
const geminiApiLogic = `    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini API
    try {
      const systemPrompt = createSystemPrompt();
      const dialogHistory = sessionData.messages
        .slice(-10) // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        .map(msg => \`\${msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: \${msg.content}\`)
        .join('\\n');
      
      const fullPrompt = \`\${systemPrompt}\\n\\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\\n\${dialogHistory}\\n\\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:\`;
      
      logToFile('debug', '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API');
      
      const response = await axios.post(
        \`\${GEMINI_API_URL}?key=\${GEMINI_API_KEY}\`,
        {
          contents: [{
            parts: [{ text: fullPrompt }]
          }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 2000,
            topP: 0.9,
            topK: 40,
            stopSequences: ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', 'User:']
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        },
        {
          timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        assistantMessage = response.data.candidates[0].content.parts[0].text.trim();
        responseSource = 'gemini';
        logToFile('info', '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API', {
          responseLength: assistantMessage.length
        });
      } else {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API');
      }
      
    } catch (apiError) {
      const errorDetails = {
        message: apiError.message,
        status: apiError.response?.status,
        statusText: apiError.response?.statusText,
        data: apiError.response?.data,
        apiKey: GEMINI_API_KEY ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      };
      
      logToFile('error', '–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ Gemini API', errorDetails);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 403 –∏–ª–∏ 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º
      if (apiError.response?.status === 403 || apiError.response?.status === 401) {
        assistantMessage = \`üîë **–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞ Google Gemini**

–ü–æ—Ö–æ–∂–µ, —á—Ç–æ API –∫–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. 

**–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://ai.google.dev/
2. –í–æ–π–¥–∏—Ç–µ –≤ Google AI Studio  
3. –ù–∞–∂–º–∏—Ç–µ "Get API Key" ‚Üí "Create API Key"
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á
5. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª .env: GEMINI_API_KEY=–≤–∞—à_–Ω–æ–≤—ã–π_–∫–ª—é—á
6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä

**–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –æ VITAHUB:** –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.\`;
        responseSource = 'api_error';
      }
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 503 - —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      else if (apiError.response?.status === 503) {
        assistantMessage = \`‚è≥ **Google Gemini –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

**–ö—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ:** \${userMessage}

–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö VITAHUB –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –û —á–µ–º –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?\`;
        responseSource = 'service_unavailable';
      }
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      else {
        logToFile('warning', '–û—à–∏–±–∫–∞ Gemini API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É', errorDetails);
        assistantMessage = \`ü§ñ **–†–∞–±–æ—Ç–∞—é –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ**

–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–º. –û—Ç–≤–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ VITAHUB.

**–í–∞—à –≤–æ–ø—Ä–æ—Å:** \${userMessage}

\${processMessage(userMessage.toLowerCase(), sessionData)}\`;
        responseSource = 'local';
      }
    }`;

// –ó–∞–º–µ–Ω—è–µ–º OpenAI –ª–æ–≥–∏–∫—É –Ω–∞ Gemini
code = code.replace(/\/\/ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI API[\s\S]*?responseSource = 'local';\s*}\s*}/m, geminiApiLogic);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
fs.writeFileSync(indexPath, code);

console.log('‚úÖ –ö–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è Google Gemini');
console.log('üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
console.log('');
console.log('üìä –°—Ç–∞—Ç—É—Å:');
console.log('- API: Google Gemini (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)');
console.log('- –õ–∏–º–∏—Ç—ã: 15 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É, 1M —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–Ω—å');
console.log('- –°–µ–π—á–∞—Å: –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'); 